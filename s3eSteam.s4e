include:
#include "s3eTypes.h"

#define S3E_STEAM_LEADERBOARD_NAME_MAX 256

typedef enum s3eSteamCallback
{
    s3eSteamCallback_UserStatsReceived, // returns pCallback->m_eResult, check vs k_EResultOK
    s3eSteamCallback_UserStatsStored, // returns pCallback->m_eResult, check vs k_EResultOK
    s3eSteamCallback_AchievementStored, // returns pCallback->m_nMaxProgress (0 if unlocked)
    s3eSteamCallback_LeaderboardUpdated, // returns struct s3eSteamLeaderboardScoreUploaded
    s3eSteamCallback_LeaderboardFound, // returns struct s3eSteamLeaderboardFound
    s3eSteamCallback_LeaderboardEntries, // returns 

    s3eSteamCallback_MAX
} s3eSteamCallback;

// type of data request, when downloading leaderboard entries (copied from steamworks header)
enum s3eSteamELeaderboardDataRequest
{
    s3eSteamELeaderboardDataRequestGlobal = 0,
    s3eSteamELeaderboardDataRequestGlobalAroundUser = 1,
    s3eSteamELeaderboardDataRequestFriends = 2,
    s3eSteamELeaderboardDataRequestUsers = 3
};

typedef struct s3eSteamLeaderboardScoreUploaded
{
    char name[S3E_STEAM_LEADERBOARD_NAME_MAX];
    uint32 globalRankNew;       // the new global rank of the user in this leaderboard
    uint32 globalRankPrevious;  // the previous global rank of the user in this leaderboard; 0 if the user had no existing entry in the leaderboard
    int32 score;                // the score that was attempted to set
    bool success;               // 1 if the call was successful
    bool changed;               // true if the score in the leaderboard change, false if the existing score was better
} s3eSteamLeaderboardScoreUploaded;

typedef struct s3eSteamLeaderboardFound
{
    char name[S3E_STEAM_LEADERBOARD_NAME_MAX];
    bool success;               // 1 if the call was successful
} s3eSteamLeaderboardFound;

typedef struct s3eSteamLeaderboardEntry
{
    char name[S3E_STEAM_LEADERBOARD_NAME_MAX];
    int32 globalRank;
    int32 score;
    int32 details;
} s3eSteamLeaderboardEntry;

typedef struct s3eSteamLeaderboardEntries
{
    char name[S3E_STEAM_LEADERBOARD_NAME_MAX];
    uint32 count;
    s3eSteamLeaderboardEntry * entries;
} s3eSteamLeaderboardEntries;

functions:
// Callback functions
s3eResult s3eSteamRegister(s3eSteamCallback callbackID, s3eCallback callbackFn, void* userData) S3E_RESULT_ERROR
s3eResult s3eSteamUnRegister(s3eSteamCallback callbackID, s3eCallback callbackFn) S3E_RESULT_ERROR

// Common
s3eBool s3eSteamStart() S3E_FALSE
s3eBool s3eSteamStarted() S3E_FALSE
s3eBool s3eSteamRestartAppIfNecessary(uint32 unOwnAppID) S3E_FALSE
const char * s3eSteamGetCurrentGameLanguage() NULL;

s3eBool s3eSteamStoreStats() S3E_FALSE
s3eBool s3eSteamRequestCurrentStats() S3E_FALSE

// SteamAPI_RunCallbacks
void s3eSteamUpdate()

// Achievements
s3eBool s3eSteamGetAchievement(const char* pchName) S3E_FALSE
s3eBool s3eSteamSetAchievement(const char* pchName) S3E_FALSE
s3eBool s3eSteamClearAchievement(const char* pchName) S3E_FALSE

// Stats
int s3eSteamGetStatInt(const char* pchName) 0
float s3eSteamGetStatFloat(const char* pchName) 0.f

s3eBool s3eSteamSetStatInt(const char* pchName, int nData) S3E_FALSE
s3eBool s3eSteamSetStatFloat(const char* pchName, float fData) S3E_FALSE

// Leaderboards
s3eBool s3eSteamLeaderboardInit(const char* pchName) S3E_FALSE
s3eBool s3eSteamLeaderboardUploadScore(const char* pchName, int32 value, s3eBool forceUpdate S3E_DEFAULT(S3E_FALSE)) S3E_FALSE
int s3eSteamLeaderboardGetEntryCount(const char* pchName) 0
s3eBool s3eSteamLeaderboardDownloadEntries(const char* pchName, s3eSteamELeaderboardDataRequest eLeaderboardData, int nRangeStart, int nRangeEnd) S3E_FALSE

// Billings
s3eBool s3eSteamIsPurchased(uint32 appId) S3E_FALSE
void s3eSteamPurchase(uint32 appId)
