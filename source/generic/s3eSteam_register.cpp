/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "s3eSteam_autodefs.h"
#include "s3eEdk.h"
#include "s3eSteam.h"
//Declarations of Init and Term functions
extern s3eResult s3eSteamInit();
extern void s3eSteamTerminate();


void s3eSteamRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[20];
    funcPtrs[0] = (void*)s3eSteamRegister;
    funcPtrs[1] = (void*)s3eSteamUnRegister;
    funcPtrs[2] = (void*)s3eSteamStart;
    funcPtrs[3] = (void*)s3eSteamStarted;
    funcPtrs[4] = (void*)s3eSteamRestartAppIfNecessary;
    funcPtrs[5] = (void*)s3eSteamGetCurrentGameLanguage;
    funcPtrs[6] = (void*)s3eSteamStoreStats;
    funcPtrs[7] = (void*)s3eSteamRequestCurrentStats;
    funcPtrs[8] = (void*)s3eSteamUpdate;
    funcPtrs[9] = (void*)s3eSteamGetAchievement;
    funcPtrs[10] = (void*)s3eSteamSetAchievement;
    funcPtrs[11] = (void*)s3eSteamClearAchievement;
    funcPtrs[12] = (void*)s3eSteamGetStatInt;
    funcPtrs[13] = (void*)s3eSteamGetStatFloat;
    funcPtrs[14] = (void*)s3eSteamSetStatInt;
    funcPtrs[15] = (void*)s3eSteamSetStatFloat;
    funcPtrs[16] = (void*)s3eSteamLeaderboardInit;
    funcPtrs[17] = (void*)s3eSteamLeaderboardUploadScore;
    funcPtrs[18] = (void*)s3eSteamLeaderboardGetEntryCount;
    funcPtrs[19] = (void*)s3eSteamLeaderboardDownloadEntries;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[20] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("s3eSteam", funcPtrs, sizeof(funcPtrs), flags, s3eSteamInit, s3eSteamTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eSteamStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eSteamRegisterExt;
    return 0;
}

int g_s3eSteamVal = s3eSteamStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eSteamRegisterExt();
}
#endif

#endif
