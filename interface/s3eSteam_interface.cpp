/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eSteam.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eSteamRegister_t)(s3eSteamCallback callbackID, s3eCallback callbackFn, void* userData);
typedef  s3eResult(*s3eSteamUnRegister_t)(s3eSteamCallback callbackID, s3eCallback callbackFn);
typedef    s3eBool(*s3eSteamStart_t)();
typedef    s3eBool(*s3eSteamStarted_t)();
typedef    s3eBool(*s3eSteamRestartAppIfNecessary_t)(uint32 unOwnAppID);
typedef const char *(*s3eSteamGetCurrentGameLanguage_t)();
typedef    s3eBool(*s3eSteamStoreStats_t)();
typedef    s3eBool(*s3eSteamRequestCurrentStats_t)();
typedef       void(*s3eSteamUpdate_t)();
typedef    s3eBool(*s3eSteamGetAchievement_t)(const char* pchName);
typedef    s3eBool(*s3eSteamSetAchievement_t)(const char* pchName);
typedef    s3eBool(*s3eSteamClearAchievement_t)(const char* pchName);
typedef        int(*s3eSteamGetStatInt_t)(const char* pchName);
typedef      float(*s3eSteamGetStatFloat_t)(const char* pchName);
typedef    s3eBool(*s3eSteamSetStatInt_t)(const char* pchName, int nData);
typedef    s3eBool(*s3eSteamSetStatFloat_t)(const char* pchName, float fData);
typedef    s3eBool(*s3eSteamLeaderboardInit_t)(const char* pchName);
typedef    s3eBool(*s3eSteamLeaderboardUploadScore_t)(const char* pchName, int32 value, s3eBool forceUpdate);
typedef        int(*s3eSteamLeaderboardGetEntryCount_t)(const char* pchName);
typedef    s3eBool(*s3eSteamLeaderboardDownloadEntries_t)(const char* pchName, s3eSteamELeaderboardDataRequest eLeaderboardData, int nRangeStart, int nRangeEnd);

/**
 * struct that gets filled in by s3eSteamRegister
 */
typedef struct s3eSteamFuncs
{
    s3eSteamRegister_t m_s3eSteamRegister;
    s3eSteamUnRegister_t m_s3eSteamUnRegister;
    s3eSteamStart_t m_s3eSteamStart;
    s3eSteamStarted_t m_s3eSteamStarted;
    s3eSteamRestartAppIfNecessary_t m_s3eSteamRestartAppIfNecessary;
    s3eSteamGetCurrentGameLanguage_t m_s3eSteamGetCurrentGameLanguage;
    s3eSteamStoreStats_t m_s3eSteamStoreStats;
    s3eSteamRequestCurrentStats_t m_s3eSteamRequestCurrentStats;
    s3eSteamUpdate_t m_s3eSteamUpdate;
    s3eSteamGetAchievement_t m_s3eSteamGetAchievement;
    s3eSteamSetAchievement_t m_s3eSteamSetAchievement;
    s3eSteamClearAchievement_t m_s3eSteamClearAchievement;
    s3eSteamGetStatInt_t m_s3eSteamGetStatInt;
    s3eSteamGetStatFloat_t m_s3eSteamGetStatFloat;
    s3eSteamSetStatInt_t m_s3eSteamSetStatInt;
    s3eSteamSetStatFloat_t m_s3eSteamSetStatFloat;
    s3eSteamLeaderboardInit_t m_s3eSteamLeaderboardInit;
    s3eSteamLeaderboardUploadScore_t m_s3eSteamLeaderboardUploadScore;
    s3eSteamLeaderboardGetEntryCount_t m_s3eSteamLeaderboardGetEntryCount;
    s3eSteamLeaderboardDownloadEntries_t m_s3eSteamLeaderboardDownloadEntries;
} s3eSteamFuncs;

static s3eSteamFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xe71b658a, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eSteam");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xe71b658a, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eSteamAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eSteamRegister(s3eSteamCallback callbackID, s3eCallback callbackFn, void* userData)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[0] func: s3eSteamRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eSteamRegister(callbackID, callbackFn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eSteamUnRegister(s3eSteamCallback callbackID, s3eCallback callbackFn)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[1] func: s3eSteamUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eSteamUnRegister(callbackID, callbackFn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamStart()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[2] func: s3eSteamStart"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamStart();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamStarted()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[3] func: s3eSteamStarted"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamStarted();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamRestartAppIfNecessary(uint32 unOwnAppID)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[4] func: s3eSteamRestartAppIfNecessary"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamRestartAppIfNecessary(unOwnAppID);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char * s3eSteamGetCurrentGameLanguage()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[5] func: s3eSteamGetCurrentGameLanguage"));

    if (!_extLoad())
        return NULL;;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char * ret = g_Ext.m_s3eSteamGetCurrentGameLanguage();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamStoreStats()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[6] func: s3eSteamStoreStats"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamStoreStats();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamRequestCurrentStats()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[7] func: s3eSteamRequestCurrentStats"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamRequestCurrentStats();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eSteamUpdate()
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[8] func: s3eSteamUpdate"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eSteamUpdate();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eBool s3eSteamGetAchievement(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[9] func: s3eSteamGetAchievement"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamGetAchievement(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamSetAchievement(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[10] func: s3eSteamSetAchievement"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamSetAchievement(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamClearAchievement(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[11] func: s3eSteamClearAchievement"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamClearAchievement(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int s3eSteamGetStatInt(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[12] func: s3eSteamGetStatInt"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_s3eSteamGetStatInt(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float s3eSteamGetStatFloat(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[13] func: s3eSteamGetStatFloat"));

    if (!_extLoad())
        return 0.f;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_s3eSteamGetStatFloat(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamSetStatInt(const char* pchName, int nData)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[14] func: s3eSteamSetStatInt"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamSetStatInt(pchName, nData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamSetStatFloat(const char* pchName, float fData)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[15] func: s3eSteamSetStatFloat"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamSetStatFloat(pchName, fData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamLeaderboardInit(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[16] func: s3eSteamLeaderboardInit"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamLeaderboardInit(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamLeaderboardUploadScore(const char* pchName, int32 value, s3eBool forceUpdate)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[17] func: s3eSteamLeaderboardUploadScore"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamLeaderboardUploadScore(pchName, value, forceUpdate);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int s3eSteamLeaderboardGetEntryCount(const char* pchName)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[18] func: s3eSteamLeaderboardGetEntryCount"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_s3eSteamLeaderboardGetEntryCount(pchName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eSteamLeaderboardDownloadEntries(const char* pchName, s3eSteamELeaderboardDataRequest eLeaderboardData, int nRangeStart, int nRangeEnd)
{
    IwTrace(STEAM_VERBOSE, ("calling s3eSteam[19] func: s3eSteamLeaderboardDownloadEntries"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eSteamLeaderboardDownloadEntries(pchName, eLeaderboardData, nRangeStart, nRangeEnd);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
